{"ast":null,"code":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * jQuery UI Effects 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n//>>label: Effects Core\n//>>group: Effects\n// jscs:disable maximumLineLength\n//>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.\n// jscs:enable maximumLineLength\n//>>docs: http://api.jqueryui.com/category/effects-core/\n//>>demos: http://jqueryui.com/effect/\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"./version\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  var dataSpace = \"ui-effects-\",\n      dataSpaceStyle = \"ui-effects-style\",\n      dataSpaceAnimated = \"ui-effects-animated\",\n      // Create a local jQuery because jQuery Color relies on it and the\n  // global may not exist with AMD and a custom build (#10199)\n  jQuery = $;\n  $.effects = {\n    effect: {}\n  };\n  /*!\n   * jQuery Color Animations v2.1.2\n   * https://github.com/jquery/jquery-color\n   *\n   * Copyright 2014 jQuery Foundation and other contributors\n   * Released under the MIT license.\n   * http://jquery.org/license\n   *\n   * Date: Wed Jan 16 08:47:09 2013 -0600\n   */\n\n  (function (jQuery, undefined) {\n    var stepHooks = \"backgroundColor borderBottomColor borderLeftColor borderRightColor \" + \"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",\n        // Plusequals test for += 100 -= 100\n    rplusequals = /^([\\-+])=\\s*(\\d+\\.?\\d*)/,\n        // A set of RE's that can match strings and generate color tuples.\n    stringParsers = [{\n      re: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2], execResult[3], execResult[4]];\n      }\n    }, {\n      re: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      parse: function parse(execResult) {\n        return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]];\n      }\n    }, {\n      // This regex ignores A-F because it's compared against an already lowercased string\n      re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)];\n      }\n    }, {\n      // This regex ignores A-F because it's compared against an already lowercased string\n      re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,\n      parse: function parse(execResult) {\n        return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)];\n      }\n    }, {\n      re: /hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n      space: \"hsla\",\n      parse: function parse(execResult) {\n        return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]];\n      }\n    }],\n        // JQuery.Color( )\n    color = jQuery.Color = function (color, green, blue, alpha) {\n      return new jQuery.Color.fn.parse(color, green, blue, alpha);\n    },\n        spaces = {\n      rgba: {\n        props: {\n          red: {\n            idx: 0,\n            type: \"byte\"\n          },\n          green: {\n            idx: 1,\n            type: \"byte\"\n          },\n          blue: {\n            idx: 2,\n            type: \"byte\"\n          }\n        }\n      },\n      hsla: {\n        props: {\n          hue: {\n            idx: 0,\n            type: \"degrees\"\n          },\n          saturation: {\n            idx: 1,\n            type: \"percent\"\n          },\n          lightness: {\n            idx: 2,\n            type: \"percent\"\n          }\n        }\n      }\n    },\n        propTypes = {\n      \"byte\": {\n        floor: true,\n        max: 255\n      },\n      \"percent\": {\n        max: 1\n      },\n      \"degrees\": {\n        mod: 360,\n        floor: true\n      }\n    },\n        support = color.support = {},\n        // Element for support tests\n    supportElem = jQuery(\"<p>\")[0],\n        // Colors = jQuery.Color.names\n    colors,\n        // Local aliases of functions called often\n    each = jQuery.each; // Determine rgba support immediately\n\n\n    supportElem.style.cssText = \"background-color:rgba(1,1,1,.5)\";\n    support.rgba = supportElem.style.backgroundColor.indexOf(\"rgba\") > -1; // Define cache name and alpha properties\n    // for rgba and hsla spaces\n\n    each(spaces, function (spaceName, space) {\n      space.cache = \"_\" + spaceName;\n      space.props.alpha = {\n        idx: 3,\n        type: \"percent\",\n        def: 1\n      };\n    });\n\n    function clamp(value, prop, allowEmpty) {\n      var type = propTypes[prop.type] || {};\n\n      if (value == null) {\n        return allowEmpty || !prop.def ? null : prop.def;\n      } // ~~ is an short way of doing floor for positive numbers\n\n\n      value = type.floor ? ~~value : parseFloat(value); // IE will pass in empty strings as value for alpha,\n      // which will hit this case\n\n      if (isNaN(value)) {\n        return prop.def;\n      }\n\n      if (type.mod) {\n        // We add mod before modding to make sure that negatives values\n        // get converted properly: -10 -> 350\n        return (value + type.mod) % type.mod;\n      } // For now all property types without mod have min and max\n\n\n      return 0 > value ? 0 : type.max < value ? type.max : value;\n    }\n\n    function stringParse(string) {\n      var inst = color(),\n          rgba = inst._rgba = [];\n      string = string.toLowerCase();\n      each(stringParsers, function (i, parser) {\n        var parsed,\n            match = parser.re.exec(string),\n            values = match && parser.parse(match),\n            spaceName = parser.space || \"rgba\";\n\n        if (values) {\n          parsed = inst[spaceName](values); // If this was an rgba parse the assignment might happen twice\n          // oh well....\n\n          inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];\n          rgba = inst._rgba = parsed._rgba; // Exit each( stringParsers ) here because we matched\n\n          return false;\n        }\n      }); // Found a stringParser that handled it\n\n      if (rgba.length) {\n        // If this came from a parsed string, force \"transparent\" when alpha is 0\n        // chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\n        if (rgba.join() === \"0,0,0,0\") {\n          jQuery.extend(rgba, colors.transparent);\n        }\n\n        return inst;\n      } // Named colors\n\n\n      return colors[string];\n    }\n\n    color.fn = jQuery.extend(color.prototype, {\n      parse: function parse(red, green, blue, alpha) {\n        if (red === undefined) {\n          this._rgba = [null, null, null, null];\n          return this;\n        }\n\n        if (red.jquery || red.nodeType) {\n          red = jQuery(red).css(green);\n          green = undefined;\n        }\n\n        var inst = this,\n            type = jQuery.type(red),\n            rgba = this._rgba = []; // More than 1 argument specified - assume ( red, green, blue, alpha )\n\n        if (green !== undefined) {\n          red = [red, green, blue, alpha];\n          type = \"array\";\n        }\n\n        if (type === \"string\") {\n          return this.parse(stringParse(red) || colors._default);\n        }\n\n        if (type === \"array\") {\n          each(spaces.rgba.props, function (key, prop) {\n            rgba[prop.idx] = clamp(red[prop.idx], prop);\n          });\n          return this;\n        }\n\n        if (type === \"object\") {\n          if (red instanceof color) {\n            each(spaces, function (spaceName, space) {\n              if (red[space.cache]) {\n                inst[space.cache] = red[space.cache].slice();\n              }\n            });\n          } else {\n            each(spaces, function (spaceName, space) {\n              var cache = space.cache;\n              each(space.props, function (key, prop) {\n                // If the cache doesn't exist, and we know how to convert\n                if (!inst[cache] && space.to) {\n                  // If the value was null, we don't need to copy it\n                  // if the key was alpha, we don't need to copy it either\n                  if (key === \"alpha\" || red[key] == null) {\n                    return;\n                  }\n\n                  inst[cache] = space.to(inst._rgba);\n                } // This is the only case where we allow nulls for ALL properties.\n                // call clamp with alwaysAllowEmpty\n\n\n                inst[cache][prop.idx] = clamp(red[key], prop, true);\n              }); // Everything defined but alpha?\n\n              if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {\n                // Use the default of 1\n                inst[cache][3] = 1;\n\n                if (space.from) {\n                  inst._rgba = space.from(inst[cache]);\n                }\n              }\n            });\n          }\n\n          return this;\n        }\n      },\n      is: function is(compare) {\n        var is = color(compare),\n            same = true,\n            inst = this;\n        each(spaces, function (_, space) {\n          var localCache,\n              isCache = is[space.cache];\n\n          if (isCache) {\n            localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];\n            each(space.props, function (_, prop) {\n              if (isCache[prop.idx] != null) {\n                same = isCache[prop.idx] === localCache[prop.idx];\n                return same;\n              }\n            });\n          }\n\n          return same;\n        });\n        return same;\n      },\n      _space: function _space() {\n        var used = [],\n            inst = this;\n        each(spaces, function (spaceName, space) {\n          if (inst[space.cache]) {\n            used.push(spaceName);\n          }\n        });\n        return used.pop();\n      },\n      transition: function transition(other, distance) {\n        var end = color(other),\n            spaceName = end._space(),\n            space = spaces[spaceName],\n            startColor = this.alpha() === 0 ? color(\"transparent\") : this,\n            start = startColor[space.cache] || space.to(startColor._rgba),\n            result = start.slice();\n\n        end = end[space.cache];\n        each(space.props, function (key, prop) {\n          var index = prop.idx,\n              startValue = start[index],\n              endValue = end[index],\n              type = propTypes[prop.type] || {}; // If null, don't override start value\n\n          if (endValue === null) {\n            return;\n          } // If null - use end\n\n\n          if (startValue === null) {\n            result[index] = endValue;\n          } else {\n            if (type.mod) {\n              if (endValue - startValue > type.mod / 2) {\n                startValue += type.mod;\n              } else if (startValue - endValue > type.mod / 2) {\n                startValue -= type.mod;\n              }\n            }\n\n            result[index] = clamp((endValue - startValue) * distance + startValue, prop);\n          }\n        });\n        return this[spaceName](result);\n      },\n      blend: function blend(opaque) {\n        // If we are already opaque - return ourself\n        if (this._rgba[3] === 1) {\n          return this;\n        }\n\n        var rgb = this._rgba.slice(),\n            a = rgb.pop(),\n            blend = color(opaque)._rgba;\n\n        return color(jQuery.map(rgb, function (v, i) {\n          return (1 - a) * blend[i] + a * v;\n        }));\n      },\n      toRgbaString: function toRgbaString() {\n        var prefix = \"rgba(\",\n            rgba = jQuery.map(this._rgba, function (v, i) {\n          return v == null ? i > 2 ? 1 : 0 : v;\n        });\n\n        if (rgba[3] === 1) {\n          rgba.pop();\n          prefix = \"rgb(\";\n        }\n\n        return prefix + rgba.join() + \")\";\n      },\n      toHslaString: function toHslaString() {\n        var prefix = \"hsla(\",\n            hsla = jQuery.map(this.hsla(), function (v, i) {\n          if (v == null) {\n            v = i > 2 ? 1 : 0;\n          } // Catch 1 and 2\n\n\n          if (i && i < 3) {\n            v = Math.round(v * 100) + \"%\";\n          }\n\n          return v;\n        });\n\n        if (hsla[3] === 1) {\n          hsla.pop();\n          prefix = \"hsl(\";\n        }\n\n        return prefix + hsla.join() + \")\";\n      },\n      toHexString: function toHexString(includeAlpha) {\n        var rgba = this._rgba.slice(),\n            alpha = rgba.pop();\n\n        if (includeAlpha) {\n          rgba.push(~~(alpha * 255));\n        }\n\n        return \"#\" + jQuery.map(rgba, function (v) {\n          // Default to 0 when nulls exist\n          v = (v || 0).toString(16);\n          return v.length === 1 ? \"0\" + v : v;\n        }).join(\"\");\n      },\n      toString: function toString() {\n        return this._rgba[3] === 0 ? \"transparent\" : this.toRgbaString();\n      }\n    });\n    color.fn.parse.prototype = color.fn; // Hsla conversions adapted from:\n    // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\n\n    function hue2rgb(p, q, h) {\n      h = (h + 1) % 1;\n\n      if (h * 6 < 1) {\n        return p + (q - p) * h * 6;\n      }\n\n      if (h * 2 < 1) {\n        return q;\n      }\n\n      if (h * 3 < 2) {\n        return p + (q - p) * (2 / 3 - h) * 6;\n      }\n\n      return p;\n    }\n\n    spaces.hsla.to = function (rgba) {\n      if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {\n        return [null, null, null, rgba[3]];\n      }\n\n      var r = rgba[0] / 255,\n          g = rgba[1] / 255,\n          b = rgba[2] / 255,\n          a = rgba[3],\n          max = Math.max(r, g, b),\n          min = Math.min(r, g, b),\n          diff = max - min,\n          add = max + min,\n          l = add * 0.5,\n          h,\n          s;\n\n      if (min === max) {\n        h = 0;\n      } else if (r === max) {\n        h = 60 * (g - b) / diff + 360;\n      } else if (g === max) {\n        h = 60 * (b - r) / diff + 120;\n      } else {\n        h = 60 * (r - g) / diff + 240;\n      } // Chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n      // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\n\n\n      if (diff === 0) {\n        s = 0;\n      } else if (l <= 0.5) {\n        s = diff / add;\n      } else {\n        s = diff / (2 - add);\n      }\n\n      return [Math.round(h) % 360, s, l, a == null ? 1 : a];\n    };\n\n    spaces.hsla.from = function (hsla) {\n      if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {\n        return [null, null, null, hsla[3]];\n      }\n\n      var h = hsla[0] / 360,\n          s = hsla[1],\n          l = hsla[2],\n          a = hsla[3],\n          q = l <= 0.5 ? l * (1 + s) : l + s - l * s,\n          p = 2 * l - q;\n      return [Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a];\n    };\n\n    each(spaces, function (spaceName, space) {\n      var props = space.props,\n          cache = space.cache,\n          to = space.to,\n          from = space.from; // Makes rgba() and hsla()\n\n      color.fn[spaceName] = function (value) {\n        // Generate a cache for this space if it doesn't exist\n        if (to && !this[cache]) {\n          this[cache] = to(this._rgba);\n        }\n\n        if (value === undefined) {\n          return this[cache].slice();\n        }\n\n        var ret,\n            type = jQuery.type(value),\n            arr = type === \"array\" || type === \"object\" ? value : arguments,\n            local = this[cache].slice();\n        each(props, function (key, prop) {\n          var val = arr[type === \"object\" ? key : prop.idx];\n\n          if (val == null) {\n            val = local[prop.idx];\n          }\n\n          local[prop.idx] = clamp(val, prop);\n        });\n\n        if (from) {\n          ret = color(from(local));\n          ret[cache] = local;\n          return ret;\n        } else {\n          return color(local);\n        }\n      }; // Makes red() green() blue() alpha() hue() saturation() lightness()\n\n\n      each(props, function (key, prop) {\n        // Alpha is included in more than one space\n        if (color.fn[key]) {\n          return;\n        }\n\n        color.fn[key] = function (value) {\n          var vtype = jQuery.type(value),\n              fn = key === \"alpha\" ? this._hsla ? \"hsla\" : \"rgba\" : spaceName,\n              local = this[fn](),\n              cur = local[prop.idx],\n              match;\n\n          if (vtype === \"undefined\") {\n            return cur;\n          }\n\n          if (vtype === \"function\") {\n            value = value.call(this, cur);\n            vtype = jQuery.type(value);\n          }\n\n          if (value == null && prop.empty) {\n            return this;\n          }\n\n          if (vtype === \"string\") {\n            match = rplusequals.exec(value);\n\n            if (match) {\n              value = cur + parseFloat(match[2]) * (match[1] === \"+\" ? 1 : -1);\n            }\n          }\n\n          local[prop.idx] = value;\n          return this[fn](local);\n        };\n      });\n    }); // Add cssHook and .fx.step function for each named hook.\n    // accept a space separated string of properties\n\n    color.hook = function (hook) {\n      var hooks = hook.split(\" \");\n      each(hooks, function (i, hook) {\n        jQuery.cssHooks[hook] = {\n          set: function set(elem, value) {\n            var parsed,\n                curElem,\n                backgroundColor = \"\";\n\n            if (value !== \"transparent\" && (jQuery.type(value) !== \"string\" || (parsed = stringParse(value)))) {\n              value = color(parsed || value);\n\n              if (!support.rgba && value._rgba[3] !== 1) {\n                curElem = hook === \"backgroundColor\" ? elem.parentNode : elem;\n\n                while ((backgroundColor === \"\" || backgroundColor === \"transparent\") && curElem && curElem.style) {\n                  try {\n                    backgroundColor = jQuery.css(curElem, \"backgroundColor\");\n                    curElem = curElem.parentNode;\n                  } catch (e) {}\n                }\n\n                value = value.blend(backgroundColor && backgroundColor !== \"transparent\" ? backgroundColor : \"_default\");\n              }\n\n              value = value.toRgbaString();\n            }\n\n            try {\n              elem.style[hook] = value;\n            } catch (e) {// Wrapped to prevent IE from throwing errors on \"invalid\" values like\n              // 'auto' or 'inherit'\n            }\n          }\n        };\n\n        jQuery.fx.step[hook] = function (fx) {\n          if (!fx.colorInit) {\n            fx.start = color(fx.elem, hook);\n            fx.end = color(fx.end);\n            fx.colorInit = true;\n          }\n\n          jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));\n        };\n      });\n    };\n\n    color.hook(stepHooks);\n    jQuery.cssHooks.borderColor = {\n      expand: function expand(value) {\n        var expanded = {};\n        each([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (i, part) {\n          expanded[\"border\" + part + \"Color\"] = value;\n        });\n        return expanded;\n      }\n    }; // Basic color names only.\n    // Usage of any of the other color names requires adding yourself or including\n    // jquery.color.svg-names.js.\n\n    colors = jQuery.Color.names = {\n      // 4.1. Basic color keywords\n      aqua: \"#00ffff\",\n      black: \"#000000\",\n      blue: \"#0000ff\",\n      fuchsia: \"#ff00ff\",\n      gray: \"#808080\",\n      green: \"#008000\",\n      lime: \"#00ff00\",\n      maroon: \"#800000\",\n      navy: \"#000080\",\n      olive: \"#808000\",\n      purple: \"#800080\",\n      red: \"#ff0000\",\n      silver: \"#c0c0c0\",\n      teal: \"#008080\",\n      white: \"#ffffff\",\n      yellow: \"#ffff00\",\n      // 4.2.3. \"transparent\" color keyword\n      transparent: [null, null, null, 0],\n      _default: \"#ffffff\"\n    };\n  })(jQuery);\n  /******************************************************************************/\n\n  /****************************** CLASS ANIMATIONS ******************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    var classAnimationActions = [\"add\", \"remove\", \"toggle\"],\n        shorthandStyles = {\n      border: 1,\n      borderBottom: 1,\n      borderColor: 1,\n      borderLeft: 1,\n      borderRight: 1,\n      borderTop: 1,\n      borderWidth: 1,\n      margin: 1,\n      padding: 1\n    };\n    $.each([\"borderLeftStyle\", \"borderRightStyle\", \"borderBottomStyle\", \"borderTopStyle\"], function (_, prop) {\n      $.fx.step[prop] = function (fx) {\n        if (fx.end !== \"none\" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {\n          jQuery.style(fx.elem, prop, fx.end);\n          fx.setAttr = true;\n        }\n      };\n    });\n\n    function getElementStyles(elem) {\n      var key,\n          len,\n          style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle,\n          styles = {};\n\n      if (style && style.length && style[0] && style[style[0]]) {\n        len = style.length;\n\n        while (len--) {\n          key = style[len];\n\n          if (typeof style[key] === \"string\") {\n            styles[$.camelCase(key)] = style[key];\n          }\n        } // Support: Opera, IE <9\n\n      } else {\n        for (key in style) {\n          if (typeof style[key] === \"string\") {\n            styles[key] = style[key];\n          }\n        }\n      }\n\n      return styles;\n    }\n\n    function styleDifference(oldStyle, newStyle) {\n      var diff = {},\n          name,\n          value;\n\n      for (name in newStyle) {\n        value = newStyle[name];\n\n        if (oldStyle[name] !== value) {\n          if (!shorthandStyles[name]) {\n            if ($.fx.step[name] || !isNaN(parseFloat(value))) {\n              diff[name] = value;\n            }\n          }\n        }\n      }\n\n      return diff;\n    } // Support: jQuery <1.8\n\n\n    if (!$.fn.addBack) {\n      $.fn.addBack = function (selector) {\n        return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n      };\n    }\n\n    $.effects.animateClass = function (value, duration, easing, callback) {\n      var o = $.speed(duration, easing, callback);\n      return this.queue(function () {\n        var animated = $(this),\n            baseClass = animated.attr(\"class\") || \"\",\n            applyClassChange,\n            allAnimations = o.children ? animated.find(\"*\").addBack() : animated; // Map the animated objects to store the original styles.\n\n        allAnimations = allAnimations.map(function () {\n          var el = $(this);\n          return {\n            el: el,\n            start: getElementStyles(this)\n          };\n        }); // Apply class change\n\n        applyClassChange = function applyClassChange() {\n          $.each(classAnimationActions, function (i, action) {\n            if (value[action]) {\n              animated[action + \"Class\"](value[action]);\n            }\n          });\n        };\n\n        applyClassChange(); // Map all animated objects again - calculate new styles and diff\n\n        allAnimations = allAnimations.map(function () {\n          this.end = getElementStyles(this.el[0]);\n          this.diff = styleDifference(this.start, this.end);\n          return this;\n        }); // Apply original class\n\n        animated.attr(\"class\", baseClass); // Map all animated objects again - this time collecting a promise\n\n        allAnimations = allAnimations.map(function () {\n          var styleInfo = this,\n              dfd = $.Deferred(),\n              opts = $.extend({}, o, {\n            queue: false,\n            complete: function complete() {\n              dfd.resolve(styleInfo);\n            }\n          });\n          this.el.animate(this.diff, opts);\n          return dfd.promise();\n        }); // Once all animations have completed:\n\n        $.when.apply($, allAnimations.get()).done(function () {\n          // Set the final class\n          applyClassChange(); // For each animated element,\n          // clear all css properties that were animated\n\n          $.each(arguments, function () {\n            var el = this.el;\n            $.each(this.diff, function (key) {\n              el.css(key, \"\");\n            });\n          }); // This is guarnteed to be there if you use jQuery.speed()\n          // it also handles dequeuing the next anim...\n\n          o.complete.call(animated[0]);\n        });\n      });\n    };\n\n    $.fn.extend({\n      addClass: function (orig) {\n        return function (classNames, speed, easing, callback) {\n          return speed ? $.effects.animateClass.call(this, {\n            add: classNames\n          }, speed, easing, callback) : orig.apply(this, arguments);\n        };\n      }($.fn.addClass),\n      removeClass: function (orig) {\n        return function (classNames, speed, easing, callback) {\n          return arguments.length > 1 ? $.effects.animateClass.call(this, {\n            remove: classNames\n          }, speed, easing, callback) : orig.apply(this, arguments);\n        };\n      }($.fn.removeClass),\n      toggleClass: function (orig) {\n        return function (classNames, force, speed, easing, callback) {\n          if (typeof force === \"boolean\" || force === undefined) {\n            if (!speed) {\n              // Without speed parameter\n              return orig.apply(this, arguments);\n            } else {\n              return $.effects.animateClass.call(this, force ? {\n                add: classNames\n              } : {\n                remove: classNames\n              }, speed, easing, callback);\n            }\n          } else {\n            // Without force parameter\n            return $.effects.animateClass.call(this, {\n              toggle: classNames\n            }, force, speed, easing);\n          }\n        };\n      }($.fn.toggleClass),\n      switchClass: function switchClass(remove, add, speed, easing, callback) {\n        return $.effects.animateClass.call(this, {\n          add: add,\n          remove: remove\n        }, speed, easing, callback);\n      }\n    });\n  })();\n  /******************************************************************************/\n\n  /*********************************** EFFECTS **********************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    if ($.expr && $.expr.filters && $.expr.filters.animated) {\n      $.expr.filters.animated = function (orig) {\n        return function (elem) {\n          return !!$(elem).data(dataSpaceAnimated) || orig(elem);\n        };\n      }($.expr.filters.animated);\n    }\n\n    if ($.uiBackCompat !== false) {\n      $.extend($.effects, {\n        // Saves a set of properties in a data storage\n        save: function save(element, set) {\n          var i = 0,\n              length = set.length;\n\n          for (; i < length; i++) {\n            if (set[i] !== null) {\n              element.data(dataSpace + set[i], element[0].style[set[i]]);\n            }\n          }\n        },\n        // Restores a set of previously saved properties from a data storage\n        restore: function restore(element, set) {\n          var val,\n              i = 0,\n              length = set.length;\n\n          for (; i < length; i++) {\n            if (set[i] !== null) {\n              val = element.data(dataSpace + set[i]);\n              element.css(set[i], val);\n            }\n          }\n        },\n        setMode: function setMode(el, mode) {\n          if (mode === \"toggle\") {\n            mode = el.is(\":hidden\") ? \"show\" : \"hide\";\n          }\n\n          return mode;\n        },\n        // Wraps the element around a wrapper that copies position properties\n        createWrapper: function createWrapper(element) {\n          // If the element is already wrapped, return it\n          if (element.parent().is(\".ui-effects-wrapper\")) {\n            return element.parent();\n          } // Wrap the element\n\n\n          var props = {\n            width: element.outerWidth(true),\n            height: element.outerHeight(true),\n            \"float\": element.css(\"float\")\n          },\n              wrapper = $(\"<div></div>\").addClass(\"ui-effects-wrapper\").css({\n            fontSize: \"100%\",\n            background: \"transparent\",\n            border: \"none\",\n            margin: 0,\n            padding: 0\n          }),\n              // Store the size in case width/height are defined in % - Fixes #5245\n          size = {\n            width: element.width(),\n            height: element.height()\n          },\n              active = document.activeElement; // Support: Firefox\n          // Firefox incorrectly exposes anonymous content\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=561664\n\n          try {\n            active.id;\n          } catch (e) {\n            active = document.body;\n          }\n\n          element.wrap(wrapper); // Fixes #7595 - Elements lose focus when wrapped.\n\n          if (element[0] === active || $.contains(element[0], active)) {\n            $(active).trigger(\"focus\");\n          } // Hotfix for jQuery 1.4 since some change in wrap() seems to actually\n          // lose the reference to the wrapped element\n\n\n          wrapper = element.parent(); // Transfer positioning properties to the wrapper\n\n          if (element.css(\"position\") === \"static\") {\n            wrapper.css({\n              position: \"relative\"\n            });\n            element.css({\n              position: \"relative\"\n            });\n          } else {\n            $.extend(props, {\n              position: element.css(\"position\"),\n              zIndex: element.css(\"z-index\")\n            });\n            $.each([\"top\", \"left\", \"bottom\", \"right\"], function (i, pos) {\n              props[pos] = element.css(pos);\n\n              if (isNaN(parseInt(props[pos], 10))) {\n                props[pos] = \"auto\";\n              }\n            });\n            element.css({\n              position: \"relative\",\n              top: 0,\n              left: 0,\n              right: \"auto\",\n              bottom: \"auto\"\n            });\n          }\n\n          element.css(size);\n          return wrapper.css(props).show();\n        },\n        removeWrapper: function removeWrapper(element) {\n          var active = document.activeElement;\n\n          if (element.parent().is(\".ui-effects-wrapper\")) {\n            element.parent().replaceWith(element); // Fixes #7595 - Elements lose focus when wrapped.\n\n            if (element[0] === active || $.contains(element[0], active)) {\n              $(active).trigger(\"focus\");\n            }\n          }\n\n          return element;\n        }\n      });\n    }\n\n    $.extend($.effects, {\n      version: \"1.12.1\",\n      define: function define(name, mode, effect) {\n        if (!effect) {\n          effect = mode;\n          mode = \"effect\";\n        }\n\n        $.effects.effect[name] = effect;\n        $.effects.effect[name].mode = mode;\n        return effect;\n      },\n      scaledDimensions: function scaledDimensions(element, percent, direction) {\n        if (percent === 0) {\n          return {\n            height: 0,\n            width: 0,\n            outerHeight: 0,\n            outerWidth: 0\n          };\n        }\n\n        var x = direction !== \"horizontal\" ? (percent || 100) / 100 : 1,\n            y = direction !== \"vertical\" ? (percent || 100) / 100 : 1;\n        return {\n          height: element.height() * y,\n          width: element.width() * x,\n          outerHeight: element.outerHeight() * y,\n          outerWidth: element.outerWidth() * x\n        };\n      },\n      clipToBox: function clipToBox(animation) {\n        return {\n          width: animation.clip.right - animation.clip.left,\n          height: animation.clip.bottom - animation.clip.top,\n          left: animation.clip.left,\n          top: animation.clip.top\n        };\n      },\n      // Injects recently queued functions to be first in line (after \"inprogress\")\n      unshift: function unshift(element, queueLength, count) {\n        var queue = element.queue();\n\n        if (queueLength > 1) {\n          queue.splice.apply(queue, [1, 0].concat(queue.splice(queueLength, count)));\n        }\n\n        element.dequeue();\n      },\n      saveStyle: function saveStyle(element) {\n        element.data(dataSpaceStyle, element[0].style.cssText);\n      },\n      restoreStyle: function restoreStyle(element) {\n        element[0].style.cssText = element.data(dataSpaceStyle) || \"\";\n        element.removeData(dataSpaceStyle);\n      },\n      mode: function mode(element, _mode) {\n        var hidden = element.is(\":hidden\");\n\n        if (_mode === \"toggle\") {\n          _mode = hidden ? \"show\" : \"hide\";\n        }\n\n        if (hidden ? _mode === \"hide\" : _mode === \"show\") {\n          _mode = \"none\";\n        }\n\n        return _mode;\n      },\n      // Translates a [top,left] array into a baseline value\n      getBaseline: function getBaseline(origin, original) {\n        var y, x;\n\n        switch (origin[0]) {\n          case \"top\":\n            y = 0;\n            break;\n\n          case \"middle\":\n            y = 0.5;\n            break;\n\n          case \"bottom\":\n            y = 1;\n            break;\n\n          default:\n            y = origin[0] / original.height;\n        }\n\n        switch (origin[1]) {\n          case \"left\":\n            x = 0;\n            break;\n\n          case \"center\":\n            x = 0.5;\n            break;\n\n          case \"right\":\n            x = 1;\n            break;\n\n          default:\n            x = origin[1] / original.width;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n      // Creates a placeholder element so that the original element can be made absolute\n      createPlaceholder: function createPlaceholder(element) {\n        var placeholder,\n            cssPosition = element.css(\"position\"),\n            position = element.position(); // Lock in margins first to account for form elements, which\n        // will change margin if you explicitly set height\n        // see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380\n        // Support: Safari\n\n        element.css({\n          marginTop: element.css(\"marginTop\"),\n          marginBottom: element.css(\"marginBottom\"),\n          marginLeft: element.css(\"marginLeft\"),\n          marginRight: element.css(\"marginRight\")\n        }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight());\n\n        if (/^(static|relative)/.test(cssPosition)) {\n          cssPosition = \"absolute\";\n          placeholder = $(\"<\" + element[0].nodeName + \">\").insertAfter(element).css({\n            // Convert inline to inline block to account for inline elements\n            // that turn to inline block based on content (like img)\n            display: /^(inline|ruby)/.test(element.css(\"display\")) ? \"inline-block\" : \"block\",\n            visibility: \"hidden\",\n            // Margins need to be set to account for margin collapse\n            marginTop: element.css(\"marginTop\"),\n            marginBottom: element.css(\"marginBottom\"),\n            marginLeft: element.css(\"marginLeft\"),\n            marginRight: element.css(\"marginRight\"),\n            \"float\": element.css(\"float\")\n          }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()).addClass(\"ui-effects-placeholder\");\n          element.data(dataSpace + \"placeholder\", placeholder);\n        }\n\n        element.css({\n          position: cssPosition,\n          left: position.left,\n          top: position.top\n        });\n        return placeholder;\n      },\n      removePlaceholder: function removePlaceholder(element) {\n        var dataKey = dataSpace + \"placeholder\",\n            placeholder = element.data(dataKey);\n\n        if (placeholder) {\n          placeholder.remove();\n          element.removeData(dataKey);\n        }\n      },\n      // Removes a placeholder if it exists and restores\n      // properties that were modified during placeholder creation\n      cleanUp: function cleanUp(element) {\n        $.effects.restoreStyle(element);\n        $.effects.removePlaceholder(element);\n      },\n      setTransition: function setTransition(element, list, factor, value) {\n        value = value || {};\n        $.each(list, function (i, x) {\n          var unit = element.cssUnit(x);\n\n          if (unit[0] > 0) {\n            value[x] = unit[0] * factor + unit[1];\n          }\n        });\n        return value;\n      }\n    }); // Return an effect options object for the given parameters:\n\n    function _normalizeArguments(effect, options, speed, callback) {\n      // Allow passing all options as the first parameter\n      if ($.isPlainObject(effect)) {\n        options = effect;\n        effect = effect.effect;\n      } // Convert to an object\n\n\n      effect = {\n        effect: effect\n      }; // Catch (effect, null, ...)\n\n      if (options == null) {\n        options = {};\n      } // Catch (effect, callback)\n\n\n      if ($.isFunction(options)) {\n        callback = options;\n        speed = null;\n        options = {};\n      } // Catch (effect, speed, ?)\n\n\n      if (typeof options === \"number\" || $.fx.speeds[options]) {\n        callback = speed;\n        speed = options;\n        options = {};\n      } // Catch (effect, options, callback)\n\n\n      if ($.isFunction(speed)) {\n        callback = speed;\n        speed = null;\n      } // Add options to effect\n\n\n      if (options) {\n        $.extend(effect, options);\n      }\n\n      speed = speed || options.duration;\n      effect.duration = $.fx.off ? 0 : typeof speed === \"number\" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;\n      effect.complete = callback || options.complete;\n      return effect;\n    }\n\n    function standardAnimationOption(option) {\n      // Valid standard speeds (nothing, number, named speed)\n      if (!option || typeof option === \"number\" || $.fx.speeds[option]) {\n        return true;\n      } // Invalid strings - treat as \"normal\" speed\n\n\n      if (typeof option === \"string\" && !$.effects.effect[option]) {\n        return true;\n      } // Complete callback\n\n\n      if ($.isFunction(option)) {\n        return true;\n      } // Options hash (but not naming an effect)\n\n\n      if (_typeof(option) === \"object\" && !option.effect) {\n        return true;\n      } // Didn't match any standard API\n\n\n      return false;\n    }\n\n    $.fn.extend({\n      effect: function effect()\n      /* effect, options, speed, callback */\n      {\n        var args = _normalizeArguments.apply(this, arguments),\n            effectMethod = $.effects.effect[args.effect],\n            defaultMode = effectMethod.mode,\n            queue = args.queue,\n            queueName = queue || \"fx\",\n            complete = args.complete,\n            mode = args.mode,\n            modes = [],\n            prefilter = function prefilter(next) {\n          var el = $(this),\n              normalizedMode = $.effects.mode(el, mode) || defaultMode; // Sentinel for duck-punching the :animated psuedo-selector\n\n          el.data(dataSpaceAnimated, true); // Save effect mode for later use,\n          // we can't just call $.effects.mode again later,\n          // as the .show() below destroys the initial state\n\n          modes.push(normalizedMode); // See $.uiBackCompat inside of run() for removal of defaultMode in 1.13\n\n          if (defaultMode && (normalizedMode === \"show\" || normalizedMode === defaultMode && normalizedMode === \"hide\")) {\n            el.show();\n          }\n\n          if (!defaultMode || normalizedMode !== \"none\") {\n            $.effects.saveStyle(el);\n          }\n\n          if ($.isFunction(next)) {\n            next();\n          }\n        };\n\n        if ($.fx.off || !effectMethod) {\n          // Delegate to the original method (e.g., .show()) if possible\n          if (mode) {\n            return this[mode](args.duration, complete);\n          } else {\n            return this.each(function () {\n              if (complete) {\n                complete.call(this);\n              }\n            });\n          }\n        }\n\n        function run(next) {\n          var elem = $(this);\n\n          function cleanup() {\n            elem.removeData(dataSpaceAnimated);\n            $.effects.cleanUp(elem);\n\n            if (args.mode === \"hide\") {\n              elem.hide();\n            }\n\n            done();\n          }\n\n          function done() {\n            if ($.isFunction(complete)) {\n              complete.call(elem[0]);\n            }\n\n            if ($.isFunction(next)) {\n              next();\n            }\n          } // Override mode option on a per element basis,\n          // as toggle can be either show or hide depending on element state\n\n\n          args.mode = modes.shift();\n\n          if ($.uiBackCompat !== false && !defaultMode) {\n            if (elem.is(\":hidden\") ? mode === \"hide\" : mode === \"show\") {\n              // Call the core method to track \"olddisplay\" properly\n              elem[mode]();\n              done();\n            } else {\n              effectMethod.call(elem[0], args, done);\n            }\n          } else {\n            if (args.mode === \"none\") {\n              // Call the core method to track \"olddisplay\" properly\n              elem[mode]();\n              done();\n            } else {\n              effectMethod.call(elem[0], args, cleanup);\n            }\n          }\n        } // Run prefilter on all elements first to ensure that\n        // any showing or hiding happens before placeholder creation,\n        // which ensures that any layout changes are correctly captured.\n\n\n        return queue === false ? this.each(prefilter).each(run) : this.queue(queueName, prefilter).queue(queueName, run);\n      },\n      show: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option)) {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"show\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.show),\n      hide: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option)) {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"hide\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.hide),\n      toggle: function (orig) {\n        return function (option) {\n          if (standardAnimationOption(option) || typeof option === \"boolean\") {\n            return orig.apply(this, arguments);\n          } else {\n            var args = _normalizeArguments.apply(this, arguments);\n\n            args.mode = \"toggle\";\n            return this.effect.call(this, args);\n          }\n        };\n      }($.fn.toggle),\n      cssUnit: function cssUnit(key) {\n        var style = this.css(key),\n            val = [];\n        $.each([\"em\", \"px\", \"%\", \"pt\"], function (i, unit) {\n          if (style.indexOf(unit) > 0) {\n            val = [parseFloat(style), unit];\n          }\n        });\n        return val;\n      },\n      cssClip: function cssClip(clipObj) {\n        if (clipObj) {\n          return this.css(\"clip\", \"rect(\" + clipObj.top + \"px \" + clipObj.right + \"px \" + clipObj.bottom + \"px \" + clipObj.left + \"px)\");\n        }\n\n        return parseClip(this.css(\"clip\"), this);\n      },\n      transfer: function transfer(options, done) {\n        var element = $(this),\n            target = $(options.to),\n            targetFixed = target.css(\"position\") === \"fixed\",\n            body = $(\"body\"),\n            fixTop = targetFixed ? body.scrollTop() : 0,\n            fixLeft = targetFixed ? body.scrollLeft() : 0,\n            endPosition = target.offset(),\n            animation = {\n          top: endPosition.top - fixTop,\n          left: endPosition.left - fixLeft,\n          height: target.innerHeight(),\n          width: target.innerWidth()\n        },\n            startPosition = element.offset(),\n            transfer = $(\"<div class='ui-effects-transfer'></div>\").appendTo(\"body\").addClass(options.className).css({\n          top: startPosition.top - fixTop,\n          left: startPosition.left - fixLeft,\n          height: element.innerHeight(),\n          width: element.innerWidth(),\n          position: targetFixed ? \"fixed\" : \"absolute\"\n        }).animate(animation, options.duration, options.easing, function () {\n          transfer.remove();\n\n          if ($.isFunction(done)) {\n            done();\n          }\n        });\n      }\n    });\n\n    function parseClip(str, element) {\n      var outerWidth = element.outerWidth(),\n          outerHeight = element.outerHeight(),\n          clipRegex = /^rect\\((-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto),?\\s*(-?\\d*\\.?\\d*px|-?\\d+%|auto)\\)$/,\n          values = clipRegex.exec(str) || [\"\", 0, outerWidth, outerHeight, 0];\n      return {\n        top: parseFloat(values[1]) || 0,\n        right: values[2] === \"auto\" ? outerWidth : parseFloat(values[2]),\n        bottom: values[3] === \"auto\" ? outerHeight : parseFloat(values[3]),\n        left: parseFloat(values[4]) || 0\n      };\n    }\n\n    $.fx.step.clip = function (fx) {\n      if (!fx.clipInit) {\n        fx.start = $(fx.elem).cssClip();\n\n        if (typeof fx.end === \"string\") {\n          fx.end = parseClip(fx.end, fx.elem);\n        }\n\n        fx.clipInit = true;\n      }\n\n      $(fx.elem).cssClip({\n        top: fx.pos * (fx.end.top - fx.start.top) + fx.start.top,\n        right: fx.pos * (fx.end.right - fx.start.right) + fx.start.right,\n        bottom: fx.pos * (fx.end.bottom - fx.start.bottom) + fx.start.bottom,\n        left: fx.pos * (fx.end.left - fx.start.left) + fx.start.left\n      });\n    };\n  })();\n  /******************************************************************************/\n\n  /*********************************** EASING ***********************************/\n\n  /******************************************************************************/\n\n\n  (function () {\n    // Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)\n    var baseEasings = {};\n    $.each([\"Quad\", \"Cubic\", \"Quart\", \"Quint\", \"Expo\"], function (i, name) {\n      baseEasings[name] = function (p) {\n        return Math.pow(p, i + 2);\n      };\n    });\n    $.extend(baseEasings, {\n      Sine: function Sine(p) {\n        return 1 - Math.cos(p * Math.PI / 2);\n      },\n      Circ: function Circ(p) {\n        return 1 - Math.sqrt(1 - p * p);\n      },\n      Elastic: function Elastic(p) {\n        return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);\n      },\n      Back: function Back(p) {\n        return p * p * (3 * p - 2);\n      },\n      Bounce: function Bounce(p) {\n        var pow2,\n            bounce = 4;\n\n        while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}\n\n        return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);\n      }\n    });\n    $.each(baseEasings, function (name, easeIn) {\n      $.easing[\"easeIn\" + name] = easeIn;\n\n      $.easing[\"easeOut\" + name] = function (p) {\n        return 1 - easeIn(1 - p);\n      };\n\n      $.easing[\"easeInOut\" + name] = function (p) {\n        return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;\n      };\n    });\n  })();\n\n  return $.effects;\n});","map":null,"metadata":{},"sourceType":"module"}